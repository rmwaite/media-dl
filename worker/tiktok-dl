#!/bin/bash

YT_DLP="yt-dlp"

SERVICE="TikTok"
ID_FIELD="id"
TITLE_FIELD="title"
TIMESTAMP_FIELD="timestamp"
UPLOADER_FIELD="uploader"

download_tiktok_video () {
    local temp_dir
    temp_dir="$(mktemp -d -t tiktok_dl.XXXXXX -u)"
    if ! mkdir -v "$temp_dir"; then
        printf 'error: unable to create temporary directory: %s\n' "$temp_dir"
        exit 1
    fi

    # yt-dlp adds the `.info.json` suffix automatically, so we use the base
    # value below when setting the output path, and use `temp_info_json`
    # everywhere else.
    local temp_info_json_base
    temp_info_json_base="$(mktemp -t info_json.XXXXXX -p "$temp_dir" -u)"
    local temp_info_json
    temp_info_json="$temp_info_json_base.info.json"

    if ! cd "$temp_dir"; then
        echo "error: cd '$temp_dir' failed" >&2
        return 1
    fi

    "$YT_DLP" --skip-download --write-info-json --write-pages --output "infojson:$temp_info_json_base" --newline --verbose "$1"

    # File exists and is not empty
    if [[ ! -s "$temp_info_json" ]]; then
        echo "error: unable to get info for '$1'" >&2
        return 1
    fi

    local ID
    ID="$(jq -r ".$ID_FIELD" "$temp_info_json")"
    if [[ -z "$ID" ]]; then
        echo "error: unable to get ID for '$1'" >&2
        return 1
    fi

    local TITLE
    TITLE="$(jq -r ".$TITLE_FIELD" "$temp_info_json")"
    if [[ -z "$TITLE" ]]; then
        echo "error: unable to get title for '$1'" >&2
        return 1
    fi

    local TIMESTAMP
    TIMESTAMP="$(jq -r ".$TIMESTAMP_FIELD" "$temp_info_json")"
    if [[ -z "$TIMESTAMP" ]]; then
        echo "error: unable to get timestamp for '$1'" >&2
        return 1
    fi

    local UPLOADER
    UPLOADER="$(jq -r ".$UPLOADER_FIELD" "$temp_info_json")"
    if [[ -z "$UPLOADER" ]]; then
        echo "error: unable to get uploader for '$1'" >&2
        return 1
    fi

    if [[ ! -d "/media/$SERVICE/@$UPLOADER" ]]; then
        if ! mkdir -v "/media/$SERVICE/@$UPLOADER"; then
            exit 1
        fi
    fi

    if ! cd "/media/$SERVICE/@$UPLOADER"; then
        printf 'error: failure changing to directory: %s\n' "/media/$SERVICE/@$UPLOADER" >&2
        exit 1
    fi

    local DIRECTORY="$ID"

    if [ ! -d "$DIRECTORY" ]; then
        if ! mkdir -v "$DIRECTORY"; then
            exit 1
        fi
        if ! cd "$DIRECTORY"; then
            printf 'error: failure changing to directory: %s\n' "$DIRECTORY" >&2
            exit 1
        fi
    else
        echo "error: directory '$DIRECTORY' already exists" >&2
        return 128
    fi

    if [ ! -d "pages" ]; then
        mkdir -v -- "pages" || exit 1
        mv -nv "$temp_dir/"*".dump" "./pages/"
    fi

    "$YT_DLP" --newline --verbose --skip-download --list-thumbnails --list-formats --load-info-json "$temp_info_json"

    "$YT_DLP" --newline --verbose --write-description --write-info-json --write-thumbnail --convert-thumbnails png --output "%(id)s.%(ext)s" --load-info-json "$temp_info_json"

    "$YT_DLP" --newline --verbose --format download/download_addr-0/download_addr-1/download_addr-2 --output "%(id)s.watermarked.%(ext)s" --load-info-json "$temp_info_json"

    # Display detailed file info before changing timestamps
    find "$PWD" -exec ls -dlR --full-time --color=never {} +
    find "$PWD" -exec stat -t {} +

    if [[ "$PWD" = "/media/$SERVICE/@$UPLOADER/$DIRECTORY" ]]; then
        touch -t "$(date -d @"$TIMESTAMP" +%Y%m%d%H%M.%S)" ./"$ID"*
        touch -t "$(date -d @"$TIMESTAMP" +%Y%m%d%H%M.%S)" .
    fi

    # Display detailed file info after changing timestamps
    find "$PWD" -exec ls -dlR --full-time --color=never {} +
    find "$PWD" -exec stat -t {} +

    # Remove temporary directory
    rm -rv "$temp_dir" || exit 1

    return 0
}

for url in "$@"; do
    download_tiktok_video "$url"
done
